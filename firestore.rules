rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && 
             request.auth.uid in ['fp68X8CKAYQDZYGGVt3ycVGztv23'];
    }

    // Helper function to check if user is a player in the game
    function isPlayerInGame(userId, players) {
      return userId in players.map(p => p.id);
    }

    // Users: allow each user to read/write their own profile, admins can read all
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if isAdmin(); // Allow admins to read all user profiles
      allow create: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.data.keys().hasAll(['email', 'name', 'createdAt']);
    }

    // Wallets: allow users to read their own wallet, server to write, admins to read all
    match /wallets/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow read: if isAdmin(); // Allow admins to read all wallets
      allow write: if request.auth != null && 
                   request.auth.uid == userId &&
                   request.resource.data.balance >= 0;
      // Allow server operations (no auth context) - be careful with this in production
      allow write: if request.auth == null;
    }

    // Transactions: allow users to read their own and write their own, server to write, admins to read all
    match /transactions/{transactionId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.userId || isAdmin());
      allow read: if isAdmin(); // Allow admins to read all transactions
      allow write: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      // Allow server operations (no auth context)
      allow write: if request.auth == null;
    }

    // Withdrawals: allow users to create and read their own withdrawal requests, admins to read all
    match /withdrawals/{withdrawalId} {
      // Allow users to create withdrawal requests
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;

      // Allow users to read their own withdrawal requests
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;

      // Allow admins to read all withdrawal requests
      allow read: if isAdmin();
    }

    // Game rooms: allow authenticated users to read and create with validation, admins to read all
    match /gameRooms/{gameRoomId} {
      allow read: if request.auth != null;
      allow read: if isAdmin(); // Allow admins to read all game rooms
      allow create: if request.auth != null && 
                    request.auth.uid == request.resource.data.hostId &&
                    request.resource.data.keys().hasAll(['name', 'hostId', 'entryFee', 'maxPlayers']);
      allow update: if request.auth != null && 
                    (request.auth.uid == resource.data.hostId || 
                     isPlayerInGame(request.auth.uid, resource.data.get('players', [])) ||
                     (request.auth.uid != null && 
                      request.resource.data.players.size() <= resource.data.maxPlayers));
      allow delete: if isAdmin(); // Allow admins to delete game rooms
    }

    // Payments: allow users to create their own payments and server operations, admins to read all
    match /payments/{paymentId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.userId || 
                   request.auth.uid == resource.data.playerId || 
                   isAdmin());
      allow read: if isAdmin(); // Allow admins to read all payments
      allow create: if request.auth != null && 
                    (request.auth.uid == request.resource.data.userId ||
                     request.auth.uid == request.resource.data.playerId);
      // Allow server operations (no auth context)
      allow update: if request.auth == null;
    }

    // Revenue tracking (admin and server only)
    match /revenue_tracking/{docId} {
      allow read: if isAdmin();
      allow write: if request.auth == null || isAdmin();
    }

    // Daily revenue (admin and server only)
    match /daily_revenue/{docId} {
      allow read: if isAdmin();
      allow write: if request.auth == null || isAdmin();
    }

    // Withdrawal analytics (admin only)
    match /withdrawal_analytics/{docId} {
      allow read: if isAdmin();
      allow write: if request.auth == null || isAdmin();
    }

    // Game history collection (admin can read all, users can read their own)
    match /game_history/{gameId} {
      allow read: if request.auth != null;
      allow read: if isAdmin();
      allow write: if request.auth == null;
    }

    // User sessions for better security
    match /user_sessions/{sessionId} {
      allow read, write: if request.auth != null && 
                        request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
                    request.auth.uid == resource.data.userId;
      allow read: if isAdmin(); // Allow admins to read user sessions
    }

    // Admin-specific collections
    match /admin_logs/{logId} {
      allow read, write: if isAdmin();
    }

    // System settings (admin only)
    match /system_settings/{settingId} {
      allow read, write: if isAdmin();
    }

    // Support tickets
    match /support_tickets/{ticketId} {
      allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
      allow read: if request.auth != null && 
                  (request.auth.uid == resource.data.userId || isAdmin());
      allow update: if isAdmin(); // Only admins can update support tickets
    }
  }
}